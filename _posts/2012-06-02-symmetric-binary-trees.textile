---
layout: post
title: Symmetric Binary Trees
---

h1. {{ post.title }}

A while ago, during a technical interview,  I was asked for an algorithm to determine whether a rooted binary tree is symmetric. At the time I came up with an algorithm that worked, but I was not able to say exactly why it worked.

First, a definition: a binary tree is symmetric if its structure is identical to the original after swapping the left and right children of each node. 

{% highlight python %}
class Node:
    def __init__(self, label=None, left=None, right=None):
        self.left = left
        self.right = right
        self.label = label
    def __str__(self):
        return "Node %s." % str(self.label
{% endhighlight %}

We label each node with the size of the subtree rooted at that node.

{% highlight python %}
def label_binary_tree(root):
    left, right, label = None, None, 0
    if root.left:
        left = label_binary_tree(root.left)
        label += left.label
    if root.right:
        right = label_binary_tree(root.right)
        label += right.label
    return Node(label + 1, left, right)
{% endhighlight %}

Next we perform an in order traversal of the tree, and store the label from each node in a list.

{% highlight python %}
def in_order_list(root):
    def in_order_helper(root, lst):
        if not root: return
        in_order_helper(root.left, lst);
        lst.append(root.label)
        in_order_helper(root.right, lst);
        return lst
    return in_order_helper(root, [])
{% endhighlight %}

If the list is a palindrome, then the binary tree is symmetric.

{% highlight python %}
def is_palindrome(seq):
    for i in xrange(len(seq)/2):
        if not seq[i] == seq[-(i+1)]:
            return False
    return True
{% endhighlight %}

To make the overall function, compose these three functions.

{% highlight python %}
def is_symmetric_binary_tree(x): 
    return is_palindrome(in_order_list(label_tree(x)))
{% endhighlight %}

But does this actually work, and if so, why? If we think about the structure of a binary tree, we notice that how we labeled the nodes assigns the root of a subtree a label that is strictly greater than any of its childrens' labels. 

Using this invariant, we can easily reconstruct a binary tree given a list generated by @in_order_list(label_binary_tree(x))@. Scan the list for the largest element. That element is the label of the root of the subtree. Now split the original list into two lists about the largest element. The left sublist describes the left subtree, and the right sublist describes the right subtree. 

{% highlight python %}
def reconstruct_binary_tree(lst):
    if lst == []: return None
    (max_idx, max_val) = (None, None)
    for (idx, val) in enumerate(lst):
        if val > max_val:
            max_idx, max_val = idx, val
    return Node(max_val, reconstruct_binary_tree(lst[:max_idx]),
                         reconstruct_binary_tree(lst[max_idx + 1:]))
{% endhighlight %}

If two binary trees are equal, then they will produce the same list of integers, because their in order traversals will be equal. If two integer list encodings of binary trees are equal, then they will be reconstructed to the same binary tree, because of the invariant that allowed us to write @reconstruct_binary_tree@. What we have defined is a one-to-one function from binary trees to lists of natural numbers. 

Now it is clear why this algorithm correctly identifies symmetric binary trees. If a binary tree is symmetric, its structure is the same as the structure of the binary tree where each node's left and right children are swapped. We can construct such a tree by reversing our integer list encoding of that binary tree. Therefore if a binary tree is symmetric, its integer list encoding must be a palindrome. 

If our encoding of a binary tree is a palindrome, then it is obvious that it is symmetric. By reversing the list of integers, we can construct the reverse of the binary tree. Since the list is a palindrome, and our encoding is a one-to-one function, the structure of the reverse of the binary tree is equal to the original binary tree.

This shows that a binary tree is symmetric iff our integer list encoding is a palindrome.

