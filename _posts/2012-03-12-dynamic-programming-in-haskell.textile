---
layout: post
title: Dynamic Programming In Haskell
math: true
---

h1. {{ page.title }}

This post will discuss the solutions to three dynamic programming problems in Haskell. Source code for these three problems is available "here":https://github.com/kevinm416/kevinm416.github.com/tree/master/code/dynamic.

h3. Maximum Sum Traveling from the Top to Base of a Pyramid

We are given a string of space delimited numbers, where each line contains one more number than the previous line. Conceptually, this input forms a pyramid:

{% highlight text %}
    1
   2 3
  4 5 6
 7 8 9 10
{% endhighlight %}

The goal is to find the maximum value of a path from the top to the bottom of the pyramid, where the value of a path is the sum of the nodes visited along the way. The restriction on movement for the path is that if we are at the ==\(i^{th}\)== number in a row, we can only move to numbers at positions ==\(i\)== and ==\(i+1\)== in the next row. Such a transition should seem intuitive from looking at the pyramid of numbers above. 

A naive but correct solution is to enumerate all possible paths from top to bottom. However, if we think about the paths we are computing while doing that search, we will realize they require recomputing the same subproblem multiple times. For example when we travel along @1->2->5->8@ and @1->3->5->8@, we recompute half the path the second time. Needing to recompute a subproblem is often a sign that a better, dynamic programming solution exists.

In this case we will use the invariant that the maximum path from a node to the bottom of the pyramid is the value of that node plus the larger of the maximum paths to the nodes below it. The base case in this definition is the nodes at the bottom of the pyramid, which have no nodes to which a path can continue. The base nodes' maximum paths are just their values. From there we can find the lengths of maximum paths at next highest row by adding each node's value to the larger of its two options to continue the path.

{% highlight haskell %}
findPath :: (Num a, Ord a) => [[a]] -> a
findPath (l1 : l2 : ls) = findPath $ (reduceRow l1 l2) : ls
findPath (l : []) = head l

reduceRow :: (Num a, Ord a) => [a] -> [a] -> [a]
reduceRow (x1 : x2 : xs) (z : zs) = (max x1 x2) + z : reduceRow (x2 : xs) zs
reduceRow _ _ = []
{% endhighlight %}

In the code above, @reduceRow@ executes the procedure we described above. Given a row of maximum paths and the row of values above that, it constructs a row of maximum paths up to the higher row. The row of maximum paths returned by @reduceRow@ will then be paired with the next row of values by the @findPath@ function. @findPath@ will keep combining rows, until there is only one row left. At that point, we have the maximum path from the top to the bottom of the pyramid.

Note that these functions work when the pyramid inverted. It is easier to write the code when the pyramid is inverted, because the base case for computing the maximum paths occurs at the base of the pyramid.

Now we just need to read and parse a file in the proper format, then pass the @[[Int]]@ list to @findPath@. 

{% highlight haskell %}
import Data.String.Utils

main = do
    file <- readFile "path/to/pyramid.txt"
    let tiers = reverse . map (replace " " ",") $ lines file
        nums = map (\x -> read $ "[" ++ x ++ "]") tiers :: [[Integer]]
    print $ findPath nums
{% endhighlight %}

h3. Longest Increasing Subsequence

The task of finding the length of the longest increasing subsequence in a list has a well known dynamic programming solution, but the interesting part here is how we implement it in Haskell. 

Let us call the input array ==\(a\)==, and let us construct another array, say ==\(q\)==, such that ==\(q[i]\)== is the longest increasing subsequence of ==\(a\)== that ends at its ==\(i^{th}\)== position. There is a straightforward recurrence to find ==\(q[i]\)== given ==\(q[j] ~ \forall ~ j < i\)==: 

==\[
  q[i] = 1 + max(q[j] \mid a[j] < a[i], j < i)
\]==

Or translated: we can extend by one the longest increasing subsequence that ends on a value less than the current value. And now we translate it again, but this time into code.

{% highlight haskell %}
import Data.List.Extras.Argmax (argmax)

nextQ :: (Num a, Ord a) => [a] -> [a] -> a
nextQ a q = 1 + (snd $ argmax snd $ filtered)
    where aMax = last a
          filtered = (aMax, 0) : (filter (\x -> fst x < aMax) $ zip (init a) q)
{% endhighlight %}

We first filter out all ==\(a[j] ~ s.t. ~ a[j] < a[i]\)==. Then we select the maximal ==\(q[j]\)==. The return value is one more than the maximal value, since we are adding the current ==\(a[i]\)== to the sequence. The tuple @(aMax, 0)@ needs to be added to filtered, because if ==\(\nexists j ~s.t.~ a[j] < a[i], j < i\)== then we will be starting a new sequence from the current ==\(a[i]\)==.

Now we need to run @nextQ@ on each prefix of ==\(a\)==, and append all the resulting ==\(q\)=='s together. The last value in ==\(q\)== will be the longest increasing subsequence of the entire list.

{% highlight haskell %}
import Data.List (inits)

incSubSeq :: (Num a, Ord a) => [a] -> [a]
incSubSeq [] = error "Empty List"
incSubSeq lst = last $ foldl l [1] intermediates
    where intermediates = drop 2 (inits lst)
          l q a = q ++ [nextQ a q]
{% endhighlight %}

The only code here that might be unfamiliar is @inits@, which returns all prefixes of a string. We @drop@ the first two items because the first item is the empty string, and the second is a one element list, which is our base case with value 1. 

h3. Edit Distance

The edit distance between two strings is the minimum number of insertion, deletion, or substitution operations to turn one string into another. For example to turn @Saturday@ into @Sunday@ we delete @at@ and then substitute @r@ for @n@ in @Saturday@, giving an edit distance of 3.

{% highlight text %}
S a t u r d a y
S - - u n d a y
{% endhighlight %}

Let ==\(edit\)== be a two-dimensional array such that ==\(edit[i][j]\)== is the edit distance between the first ==\(i\)== letters of ==\(s\)== and the first ==\(j\)== letters of ==\(t\)==. First we describe the base cases. To turn the empty string into another string, we need to insert each character from the other string, and to turn a string into the empty string, we need to delete each character in that string. 

\[
  \begin{align*}
    edit(0, j) &= j \\ edit(i, 0) &= i \\
  \end{align*}
\]

When trying to find the edit distance between ==\(s[0 \dots i]\)== and ==\(t[0 \dots j]\)==, we use a recurrence containing three subproblems. If the last operation was an deletion, the edit distance is one plus the edit distance between ==\(s[0 \dots i]\)== and ==\(t[0 \dots j-1]\)==. If the last operation was an insertion, the edit distance is one plus the edit distance between ==\(s[0 \dots i-1]\)== and ==\(t\)==. And if the last operation was a substitution, then the new edit distance is the edit distance between ==\(s[0..i-1]\)== and ==\(t[0 \dots j-1]\)== plus 1 if ==\(a \neq b\)== and 0 otherwise. The value of ==\(edit[i][j]\)== must be the minimum of those three options.

\[
  \begin{align*}
    edit(i, j) &= min \begin{cases} edit(i, j-1) + 1 \\ edit(i-1, j) + 1 \\ edit(i-1, j-1) + penalty \end{cases} \\
    penalty &= \begin{cases} 0 ~ if ~ a = b \\ 1 ~ otherwise \end{cases} \\
  \end{align*} 
\]

Let us write the code for this recurrence assuming we have the array @edit@ representing the edit distances, and the strings to compare, @xs@ and @xy@.

{% highlight haskell %}
import Data.Array.IArray

editDistance :: Eq a => Array Int a -> Array Int a -> Int
editDistance s t = edit ! (x, y)
    where recurrence :: (Int, Int) -> Int
          recurrence (0, j) = j
          recurrence (i, 0) = i
          recurrence (i, j) = minimum [edit ! (i-1, j-1) + penalty,
                                       edit ! (i-1, j) + 1,
                                       edit ! (i, j-1) + 1]
              where penalty = if (s ! i) == (t ! j) then 0 else 1
{% endhighlight %}

The pattern matching in Haskell means that our mathematical definition maps almost exactly onto the code. All we needed to do was look up the three subproblems, and take the value of the subproblem that minimized the edit distance to the current position.

Now we need to construct the array @edit@. As long as the three values at indices @(i-1,j)@, @(i, j-1)@ and @(i-1, j-1)@ are assigned the appropriate edit distances in @edit@, then @edit[i][j]@ is  @recurrence(i,j)@. If we iterate over the indices of @edit@ in Lexicographic order (==\((a,b)\le(c,d) \iff a < c \lor (a = c \land b \le d)\)==) we are guaranteed to have solved all the dependent subproblems before the current subproblem. The @range@ function will do exactly what we want in this case.

{% highlight haskell %}
          (_, x) = bounds s
          (_, y) = bounds t
          size = ((0,0), (x,y))

          edit :: Array (Int, Int) Int
          edit = array size [(coord, recurrence coord) | 
                              coord <- range size]
{% endhighlight %}

To run @editDistance@, we convert the input strings to arrays before calling @editDistance@.

{% highlight haskell %}
main = do
    let w1 = "Saturday"
        w2 = "Sunday"
        a1 = listArray (1, length w1) w1
        a2 = listArray (1, length w2) w2
    print $ editDistance a1 a2
{% endhighlight %}

Now that we have completed coding the algorithm, we will look at its runtime. If ==\(l = length(s)\)== and ==\(m = length(t)\)==, this algorithm requires filling in a table with ==\(lm\)== entries. Each of those indices in the table requires a call to @recurrence@. Haskell's array classes provide us with ==\(O(1)\)== time access to the characters in the @xs@ and @ys@ as well as entries in @edit@. The overall runtime is therefore ==\(O(lm)\)==.
