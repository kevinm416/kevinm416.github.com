---
layout: post
title: Tetris Timing Thread
---

h1. {{ page.title }}

24 Jan 2012

Previously, we defined the "Tetromino representation":../../01/11/tetromino-representation.html we are going to use when writing our Tetris game. Ultimately, we are going to have Tetris running inside a GUI framework. GUI frameworks have their own main loops, so we will need an external timing thread to create the signals that indicate when the Tetrominos should fall. To see how it is used, look at the Tetris "source":https://github.com/kevinm416/kevinm416.github.com/tree/master/code/tetris.

h3. Overall Strategy

We need a timer that can call a method at a given interval to signal that the block needs to fall. However, as the player progresses, the interval between falling will decrease, so we will need to be able to change the @Timer@ 's interval. The player will be able to pause the game, so the @Timer@ must support pausing, and continuing. And when the player quits, we will need a way to signal to the timing thread that the game is over.

h3. threading.Timer Implementation

Python does provide a @Timer@ in the @threading@ package, but it does not repeat. We could make a repeating timer by chaining @threading.Timer@ 's together, something like this:

{% highlight python %}
def Timer:
    def __init__(self, interval, fn):
    	self.interval = interval
    	self.fn = fn
    	self.evt_time = time.time() + interval
    	self.not_paused = threading.Event()
    	self.not_paused.set()
    	self.exit = threading.Event()
    	self.timer = threading.Timer(self.evt_time - time.time(), self.run)
    	self.timer.start()
    def run(self):
        if self.exit.is_set(): return
        self.not_paused.wait()
        self.fn()
        self.timer = threading.Timer(self.evt_time - time.time(), self.run)
        self.timer.start()
        self.evt_time += self.interval
{% endhighlight %}

We need to think about what will happen if we decrease the @Timer@ 's interval while it is waiting. We can not wait until the current timer wakes up, because by that point we have missed the new time of the event. One possibility is to use @Timer.cancel@, and start a different @Timer@. 

{% highlight python %}
    def reschedule(self, interval):
    	self.evt_time = self.evt_time - self.interval + interval
    	self.interval = interval
        self.timer.cancel()
        self.timer = threading.Timer(self.evt_time - time.time(), self.run)
        self.timer.start()
{% endhighlight %}

But this creates a race condition. First the active timer creates a new @Timer@ but has not yet assigned it to @self.timer@. Then @reschedule@ is called from another thread, which will cancel the old timer, create another new @Timer@, and start it. Now there will be an extra event triggered.

h3. threading.Thread implementation

To fix this problem we need to rework @reschedule@. And to make it easier, we are going to move away from using @threading.Timer@, and subclass @threading.Thread@ instead. Our @Timer@ will be a single thread that sleeps while it is waiting, and is woken up when it is rescheduled. 

{% highlight python %}
class Timer(threading.Thread):
    def __init__(self,  interval, fn):
        threading.Thread.__init__(self)
        self.interval = interval
        self.fn = fn
        self.cond = threading.Condition()
        self.canceled = threading.Event()
        self.paused = threading.Event()
        self.paused.set()
        self.lock = threading.Lock()
        self.evt_time = None
    def cancel(self):
        self.canceled.set()
    def pause(self):
        self.paused.clear()
{% endhighlight %}

The code above creates events for pausing and canceling the @Timer@, as well as creating a condition variable for the @Timer@ to sleep on, and a lock to synchronize access from other threads. Now we have everything we need to write the thread's run method. Inside @run@ we have the invariant that @self.evt_time@ is the time at which @self.fn@ should be executed.

{% highlight python %}
    def run(self):
        self.evt_time = time.time() + self.interval
        while True:
            current_time = time.time()
            while current_time < self.evt_time:
                self.cond.acquire()
                self.cond.wait(self.evt_time - current_time)
                self.cond.release()
                self.paused.wait()
                current_time = time.time()
            if not self.canceled.is_set():
                self.fn()
                self.cond.acquire()
                self.evt_time += self.interval
                self.cond.release()
            else : return
{% endhighlight %}

The first thing we do inside @run@ is set @self.evt_time@ because a thread could be created, but not run until later, and we want the first event to be scheduled based on when the thread is run. Then we want to sleep until @self.evt_time@. Also remember that other threads will be changing @self.evt_time@ and @self.interval@ when they are rescheduling the @Timer@, so we will need to synchronize access to those variables.

{% highlight python %}
def reschedule(self, interval):
        self.lock.acquire()
        self.evt_time = self.evt_time - self.interval + interval
        self.interval = interval
        self.lock.release()
        self.cond.acquire()
        self.cond.notify()
        self.cond.release()
{% endhighlight %}

It's important that the @Timer@ thread is waiting on a condition variable. With the @threading.Timer@ implementation, we had problems changing the interval, because it involved canceling the current timer and starting a new one. In this model, the @Timer@ is a thread and is waiting on @self.cond@, so we can just notify the timer thread, and it will recalculate how long to sleep.

The only additional method we need to support is to restart the @Timer@. This operation is useful for Tetris, because after performing a hard drop, we want the player to have the entire interval to position the Tetromino, not the amount of time left before the next event. This method is very similar to @reschedule@, but we do not have to change @interval@. 

{% highlight python %}
def restart(self):
        self.paused.set()
        self.lock.acquire()
        self.evt_time = time.time() + self.interval
        self.lock.release()
{% endhighlight %}

We do not need to notify the sleeping thread because since we are not changing @self.interval@, the thread is already scheduled to wake up before @self.evt_time@. There is no advantage to forcing the thread to wake up when @restart@ is called.

@Timer@ is a thread safe class that will call a function at a given interval. We will use @Timer@ to signal fall events in Tetris.